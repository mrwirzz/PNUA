services:
  user-manager:
    build:
       context: ./managers/user
       dockerfile: Dockerfile
    volumes:
      - ./managers:/app/managers/user
    ports:
      - "8080:8080"
    environment:
      - MONGO_URI=mongodb://mongodb:27017/users_db
    depends_on:
      - mongodb
    networks:
      - backend
    command: ["python", "app.py"]

  news-manager:
    build:
      context: ./managers/news
      dockerfile: Dockerfile
    volumes:
      - ./managers:/app/managers/news
    ports:
      - "8081:8081"
    environment:
      - NEWS_API_KEY={NEWS_API_KEY}
    networks:
      - backend
    command: ["python", "app.py"]

  mongodb:
    image: mongo:5.0
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db  # Assuming data directory is /data/db inside the container
    networks:
      - backend
      
      # accessors
  ai:
    build: ./accessors/ai
    container_name: ai_container
    environment:
      - GEMINI_API_KEY={GEMINI_API_KEY}
    ports:
      - "8082:8082"
    logging:
      driver: "json-file"
      options:
        max-size: "2m"
        max-file: "2"
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - network-dapr

  dapr_ai:
    image: daprio/daprd:latest
    container_name: dapr_ai_container
    command: [
      "./daprd",
      "-app-port", "8082",
      "-app-id", "ai",
      "-app-protocol", "http",
      "-dapr-http-port", "3501",
      "-resources-path", "./dapr/components",
      "-config", "./dapr/config.yaml",
      "-dapr-grpc-port", "50001"
    ]
    depends_on:
      - ai
    volumes:
      - ./dapr/:/dapr
    network_mode: "service:ai"

  message_handler:
    build: ./accessors/message_handler
    container_name: message_handler_container
    ports:
      - "8084:8084"
    logging:
      driver: "json-file"
      options:
        max-size: "2m"
        max-file: "2"
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - network-dapr

  dapr_message_handler:
    image: daprio/daprd:latest
    container_name: dapr_message_handler_container

    command: [
      "./daprd",
      "-app-port", "8084",
      "-app-id", "message_handler",
      "-app-protocol", "http",
      "-dapr-http-port", "3502",
      "-resources-path", "./dapr/components",
      "-config", "./dapr/config.yaml",
      "-dapr-grpc-port", "50001"
    ]
    depends_on:
      - message_handler
    volumes:
      - ./dapr/:/dapr
    network_mode: "service:message_handler"

  collector:
    build: ./accessors/collector 
    container_name: collector_container
    environment:
      - NEWS_API_KEY=${NEWS_API_KEY}  
    ports:
      - "8083:8083"
    logging:
      driver: "json-file"
      options:
        max-size: "2m"
        max-file: "2"
    depends_on:
      - rabbitmq
    networks:
      - network-dapr


  dapr_collector:
    image: daprio/daprd:latest
    container_name: dapr_collector_container

    command: [
      "./daprd",
      "-app-port", "8083",
      "-app-id", "collector",
      "-app-protocol", "http",
      "-dapr-http-port", "3500",
      "-resources-path", "./dapr/components",
      "-config", "./dapr/config.yaml",
      "-dapr-grpc-port", "50001"
    ]
    depends_on:
      - collector
    volumes:
      - ./dapr/:/dapr
    network_mode: "service:collector"


  users_db:
    build: ./accessors/users_db
    container_name: users_db_accessor
    ports:
      - "8085:8085"
    depends_on:
      - rabbitmq
    networks:
      - network-dapr

      # Queue
  rabbitmq:
    image: "rabbitmq:3-management"
    container_name: rabbitmq
    ports:
      - "5672:5672"    # Порт для RabbitMQ messaging
      - "15672:15672"  # Порт для RabbitMQ Management UI
    networks:
      - network-dapr
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      RABBITMQ_DEFAULT_USER: guest  # Установить пользователя RabbitMQ
      RABBITMQ_DEFAULT_PASS: guest  # Установить пароль RabbitMQ

volumes:
  mongodb-data:
    driver: local
  redis-data:
    driver: local

networks:
  backend:
    driver: bridge
  network-dapr:
    driver: bridge